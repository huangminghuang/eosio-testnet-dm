info:
  description: A eosio Testnet in a Kubernetes cluster.
  author: Huang-Ming Huang.

required:
- clusterType
- clusterTypeApps

properties:
  clusterType:
    type: string
    description: Type for cluster to deploy into.
  clusterTypeApps:
    description: The name of the type provider which can create resources from the Kubernetes apps/v1 API for cluster to deploy into.
    type: string
  image:
    type: string
    description: Docker image to run.
    default: eosio/eos
  replicas: 
    type: integer
    description: Number of nodeos pods.
    default: 1
  producers:
    type: integer
    description: Number of producer pods.
    default: 1
  args:
    type: array
    items: 
      type: string
    decription: The additional argument passed to nodeos.
    default: 
      - --max-transaction-time 
      - "50000" 
      - --abi-serializer-max-time-ms 
      - "990000" 
      - --contracts-console 
      - --filter-on 
      - "*"
  persistence:
    type: object
    properties:
      enabled:
        type: boolean
        default: false
      size:
        type: string
        default: 100Gi
    default:
      enabled: false
      size: 100Gi
  genesis:
    type: object
    properties:
      initial_timestamp: 
        type: string
        default: &default_initial_timestamp "2018-09-12T16:21:19.132"
      signatureProvider:
        type: string
        default: &default_signatureProvider EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV=KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3
      initial_configuration:
        type: object
        default: &default_initial_configuration
          max_block_net_usage: 1048576 
          target_block_net_usage_pct: 1000
          max_transaction_net_usage: 524288
          base_per_transaction_net_usage: 12
          net_usage_leeway: 500
          context_free_discount_net_usage_num: 20
          context_free_discount_net_usage_den: 100
          max_block_cpu_usage: 200000
          target_block_cpu_usage_pct: 1000
          max_transaction_cpu_usage: 150000
          min_transaction_cpu_usage: 100
          max_transaction_lifetime: 3600
          deferred_trx_expiration_window: 600
          max_transaction_delay: 3888000
          max_inline_action_size: 4096
          max_inline_action_depth: 4
          max_authority_depth: 6
    default: 
      initial_timestamp: *default_initial_timestamp
      signatureProvider: *default_signatureProvider
      initial_configuration: *default_initial_configuration
  logging:
    type: object
    default:
      includes: []
      appenders:
      - name: stderr
        type: console
        args:
          stream: std_error
          level_colors:
          - level: debug
            color: green
          - level: warn
            color: brown
          - level: error
            color: red
        enabled: true
      - name: stdout
        type: console
        args:
          stream: std_out
          level_colors:
          - level: debug
            color: green
          - level: warn
            color: brown
          - level: error
            color: red
        enabled: true
      - name: net
        type: gelf
        args:
          endpoint: 10.160.11.21:12201
          host: testnet_00
        enabled: true
      loggers:
      - name: default
        level: debug
        enabled: true
        additivity: false
        appenders:
        - stderr
        - net
  nodeos_wrapper.sh: 
    type: string
    default: |-
      #!/bin/bash

      trap "trap - SIGTERM && kill -- 0; sleep 3" SIGTERM

      ## 'set -f' is used to disable filename expansion (globbing).
      set -f
      # the awk script captures the RED and BROWN lines from stdin and output them to stderr;
      # otherwise, it ouputs to stdout
      (nodeos $* |& mawk -Winteractive '/\033\[0;3(1|3)m/{print > "/dev/stderr"; next}{print}') & wait
  
  boot-nodeos.sh:
    type: string
    default: |-
      #/bin/bash

      host_id=${HOSTID:-${HOSTNAME}}
      host_prefix=${host_id%-*} ## GET the substring before the character '-' in HOSTNAME
      ordinal=${host_id##*-}    ## GET the substring after the character '-' in HOSTNAME
      service_pattern=${SERVICE_PATTERN:-${host_id}-\{\}} # the service pattern should be in the form of <StatefulSet-Name>-{}.<ServiceName>

      echo PRODUCERS=${PRODUCERS} NODES=${NODES}
      num_producers=${PRODUCERS:-1}
      num_nodes=${NODES:-1}

      data_dir=${data_dir:-${HOME}/.local/share/eosio/nodeos/data}
      [ ! -d $data_dir ] || data_files=$(ls -A $data_dir 2>/dev/null)
      config_dir=${config_dir:-${HOME}/.local/share/eosio/nodeos/config}
      mkdir -p $config_dir

      bios_url=http://${BIOS_ADDR}
      bios_host=${BIOS_ADDR%:*}

      wallet_host=127.0.0.1:8899
      wdurl=http://${wallet_host}

      genesiskey=${GENESISKEY:-"EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV=KEY:5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3"}
      pri_genesiskey=${genesiskey##*=KEY:}
      pub_genesiskey=${genesiskey%=KEY:*}

      [[ "$pub_genesiskey" ==  "EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV" ]] || sed -i "s/EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV/$$pub_genesiskey/" /eosio/genesis.json

      ecmd="cleos --wallet-url ${wdurl} --url ${bios_url}"
      wcmd="cleos --wallet-url ${wdurl} wallet"

      function echoerr { echo "$@" 1>&2; }

      function config_producer_args {
        keyfile=$config_dir/key.txt
        # create a new key file if not existed
        [ -f "$keyfile" ] || cleos create key --file $keyfile

        readarray syskey < $keyfile
        pubsyskey=$(echo ${syskey[1]#"Public key: "} | xargs) ## xargs is usd to remove leading and trailing whitespaces 
        prisyskey=$(echo ${syskey[0]#"Private key: "} | xargs)
        ARGS="--signature-provider ${pubsyskey}=KEY:${prisyskey} $ARGS --plugin eosio::producer_plugin"

        alphabets="abcdefghijklmnopqrstuv"
        for (( id=$ordinal; id<21; id+=$num_producers )); do
          producer_name="defproducer${alphabets:$id:1}"
          ARGS="$ARGS --producer-name ${producer_name}"
          node_producers="${node_producers} ${producer_name}"
        done
      }

      function config_p2p_addresses {
        ARGS="$ARGS --plugin eosio::net_plugin"
        for ((id=0; id<$num_nodes ; id++)); do
          [[ $id == $ordinal ]] || ARGS="$ARGS --p2p-peer-address ${service_pattern/\{\}/${id}}:9876"
        done
      }

      function wait_wallet_ready() {
        for (( i=0 ; i<10; i++ )); do
          ! $wcmd list 2>/tmp/wallet.txt || [ -s /tmp/wallets.txt ] || break
          sleep 3
        done
      }

      function wait_bios_ready {
        for (( i=0 ; i<10; i++ )); do
          ! $ecmd get info || break
          sleep 3
        done
      }

      function setup_eosio {
  
        # we only setup the eosio account when this is the first node
        [[ $ordinal == 0 ]] || return 0
  
        $ecmd set contract eosio /contracts/eosio.bios eosio.bios.wasm eosio.bios.abi || return 0

        # Create required system accounts
        readarray syskey <<< $(cleos create key --to-console)
        local pubsyskey=${syskey[1]#"Public key:"}
        local prisyskey=${syskey[0]#"Private key:"}
        $wcmd import -n ignition --private-key $prisyskey
        $ecmd create account eosio eosio.bpay $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.msig $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.names $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.ram $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.ramfee $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.saving $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.stake $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.token $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.vpay $pubsyskey $pubsyskey
        $ecmd create account eosio eosio.sudo $pubsyskey $pubsyskey

        $ecmd set contract eosio.token /contracts/eosio.token eosio.token.wasm eosio.token.abi
        $ecmd set contract eosio.msig  /contracts/eosio.msig eosio.msig.wasm eosio.msig.abi
        $ecmd set contract eosio.sudo  /contracts/eosio.sudo eosio.sudo.wasm eosio.sudo.abi

        $ecmd push action eosio.token create '["eosio","10000000000.0000 SYS"]' -p eosio.token
        $ecmd push action eosio.token issue '["eosio","1000000000.0000 SYS","memo"]' -p eosio

        $ecmd set contract eosio /contracts/eosio.system eosio.system.wasm eosio.system.abi
  
      }

      function setup_producer_account {  
   
        [ -z "$prisyskey" ] || $ecmd wallet import -n ignition --private-key $prisyskey
  
        while ! $ecmd get account eosio | grep total; do
          sleep 3
        done
  
        for producer_name in $node_producers; do
          $ecmd system newaccount --transfer --stake-net "10000000.0000 SYS" --stake-cpu "10000000.0000 SYS"  --buy-ram "10000000.0000 SYS" eosio $producer_name $pubsyskey $pubsyskey || continue
          $ecmd system regproducer $producer_name $pubsyskey
          $ecmd system voteproducer prods $producer_name $producer_name
        done
      }

      _term() { 
        trap - SIGTERM && kill -- 0
        sleep 3
        exit 0
      }

      ARGS=
      while [[ $# -gt 0 ]]; do
        case $1 in
          --genesis-timestamp)
            genesis_timestamp_option="--genesis-timestamp $2"
            shift
            shift
          ;;
          *)
            ARGS="$ARGS $1"
            shift
        esac
      done


      [[ $num_nodes > $num_producers ]] || num_nodes=num_producers
      [[ $num_producers < $ordinal ]] || config_producer_args

      config_p2p_addresses
      ARGS="$ARGS --plugin eosio::chain_api_plugin --plugin eosio::history_api_plugin" 
      ARGS="$ARGS --plugin eosio::http_plugin --http-server-address 0.0.0.0:8888 --http-validate-host false --p2p-listen-endpoint 0.0.0.0:9876 --p2p-server-address ${service_pattern/\{\}/${ordinal}}:9876"
      ARGS="$ARGS --logconf /eosio/logging.json"

      set -e
      set -x

      trap _term SIGTERM
      # trap "echo caught SIGTERM; kill -- -0; sleep 3; exit 0" SIGTERM EXIT

      if [ -d "$data_dir" ] ; then
        [[ $ordinal != 0 ]] || ARGS="$ARGS --enable-stale-production"
      else
        ## remove data_dir if it's a dirty restart
        rm -rf ${data_dir}
        rm -rf ${HOME}/eosio-wallet
        keosd --http-server-address ${wallet_host} &
        wait_wallet_ready
        $wcmd create --to-console -n ignition
        $wcmd import -n ignition --private-key $pri_genesiskey
        wait_bios_ready
        setup_eosio
        setup_producer_account
        ARGS="$ARGS --p2p-peer-address ${bios_host}:9876 --genesis-json /eosio/genesis.json $genesis_timestamp_option"
        pkill keosd
      fi

      set -f #disable file name globing 
      bash /eosio/nodeos_wrapper.sh $ARGS &
      child=$!
      ! wait "$child" || exit 0

      bash /eosio/nodeos_wrapper.sh $ARGS --replay-blockchain &
      child=$!
      ! wait "$child" || exit 0

      bash /eosio/nodeos_wrapper.sh $ARGS --hard-replay-blockchain &
      child=$!
      wait "$child"



    
    

    
  